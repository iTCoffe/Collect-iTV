name: LiTV Daily Update

# 触发规则
on:
  workflow_dispatch:
  watch:
    types: [started]
  schedule:
    - cron: '0 3,12,21 * * *'

env:
  TZ: Asia/Shanghai

jobs:
  Update:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: GetTime
      id: date
      run: echo "date=$(date +'%Y-%m-%d %H:%M:%S CST')" >> $GITHUB_OUTPUT

    - name: Update Files
      run: |
        # 下载基础源文件
        wget -q https://raw.githubusercontent.com/mursor1985/LIVE/main/iptv.m3u -O Base1.m3u
        wget -q https://raw.githubusercontent.com/suxuang/myIPTV/main/ipv4.m3u -O Base2.m3u
        
        # 合并并去重基础源
        cat Base1.m3u Base2.m3u | awk '!seen[$0]++' > Base.m3u
        
        # 处理央视源
        grep -A 1 '央视' Base.m3u | grep -v '^--$' | awk '!seen[$0]++' > CCTV.m3u
        
        # 处理非央视源
        grep -v -A 1 '央视' Base.m3u | grep -v '^--$' | awk '!seen[$0]++' > CNTV.m3u
        
        # 生成最终M3U
        echo '#EXTM3U x-tvg-url="https://itv.jsdelivr.dpdns.org/epg.xml" catchup="append" catchup-source="?playseek=${(b)yyyyMMddHHmmss}-${(e)yyyyMMddHHmmss}"' >LiTV.m3u
        
        # 添加自定义提示 (温馨提示)
        echo '#EXTINF:-1 tvg-id="温馨提示" tvg-name="温馨提示" tvg-logo="https://logo.5iclub.dpdns.org/tv/温馨提示.png" group-title="🦧温馨提示",温馨提示' >>LiTV.m3u
        echo 'https://iCloud.5iclub.dpdns.org/video/Disclaimer.mp4' >>LiTV.m3u
        
        # 添加新增提示 (谨防诈骗)
        echo '#EXTINF:-1 tvg-id="谨防诈骗" tvg-name="谨防诈骗" tvg-logo="https://logo.5iclub.dpdns.org/tv/谨防诈骗.png" group-title="🦧温馨提示",谨防诈骗' >>LiTV.m3u
        echo 'https://iCloud.5iclub.dpdns.org/video/Disclaimer.mp4' >>LiTV.m3u
        
        # 添加新增提示 (禁止蕉绿)
        echo '#EXTINF:-1 tvg-id="禁止蕉绿" tvg-name="禁止蕉绿" tvg-logo="https://logo.5iclub.dpdns.org/tv/禁止蕉绿.png" group-title="🦧温馨提示",禁止蕉绿' >>LiTV.m3u
        echo 'https://iCloud.5iclub.dpdns.org/video/Disclaimer.mp4' >>LiTV.m3u
        
        # 合并源文件
        cat CCTV.m3u CNTV.m3u >>LiTV.m3u

        # 🔥 核心功能：仅对非 # 开头的播放链接行追加 |http-user-agent=...
        awk '
        /^#/ { print; next }  # 所有以 # 开头的行（如 #EXTINF）原样输出
        /^[^#]/ {               # 匹配非注释的真实播放链接
            print $0"|http-user-agent=okHttp/Mod-1.3.0.0"
        }
        ' LiTV.m3u > temp.m3u && mv temp.m3u LiTV.m3u
        
        # 生成TXT播放列表
        awk '/^#EXTINF:/ {
            split($0, a, ",");
            name = a[2];
            getline url;
            gsub(/\\r/, "", name);
            gsub(/\\r/, "", url);
            sub(/^ /, "", name);
            print name "," url;
        }' LiTV.m3u | awk '!seen[$0]++' > LiTV.txt
        
        # 清理临时文件
        rm -f Base.m3u CCTV.m3u CNTV.m3u


    - name: Git Pull Latest Changes
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        git pull origin main  # 修改为你的实际分支名称，可能是 main 或 master

    - name: Commit Changes
      run: |
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git config user.name "github-actions[bot]"

        # 添加文件
        git add LiTV.m3u LiTV.txt

        # 提交更改
        git commit -m "Update at ${{ steps.date.outputs.date }}"
        git push


这个修改后的代码包括两个重要改进：

1. 添加了独立的 `Git Pull Latest Changes` 步骤，在推送前先拉取远程最新内容，解决 "Updates were rejected because the remote contains work that you do not have locally" 错误

2. 简化了提交信息，更清晰地标明更新时间

请注意：
- 将 `git pull origin main` 中的 `main` 替换为你的实际分支名称（通常是 `main` 或 `master`）
- 这个解决方案假设你有足够的推送权限
- 如果代码库有复杂分支策略，可能需要更高级的冲突解决方案
