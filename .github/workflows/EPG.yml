name: EPG Update
on:
  workflow_dispatch:
  push:
  schedule:
    - cron: '0 1,7,13,19 * * *'

env:
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # 获取完整提交历史

    - name: Update EPG Files
      id: update
      run: |
        # 设置选项：errexit 和 pipefail
        set -o errexit
        set -o pipefail
        
        # 定义所有 EPG 源，按优先级排序
        epg_urls=(
          "https://epg.112114.xyz/pp.xml"  # 第一优先级
          "http://e.erw.cc/e.xml"           # 第二优先级
        )
        
        changed=false
        # 检查 epg.xml 是否已存在
        if [ ! -f epg.xml ]; then
          # 如果文件不存在，初始化为空文件以避免后续 cmp 报错
          touch epg.xml
          changed=true
          echo "epg.xml 文件不存在，初始化新文件。"
        fi
        
        echo "开始检查 EPG 源..."
        echo "可用的 EPG 源数量: ${#epg_urls[@]}"
        
        # 使用临时文件
        temp_file=$(mktemp)
        new_source_url=""
        new_file_downloaded=false

        for url in "${epg_urls[@]}"; do
          echo "正在从 $url 下载 EPG 数据..."
          
          # 下载文件
          if wget -nv -O "$temp_file" "$url"; then
            # 检查文件是否有效
            if [ -s "$temp_file" ] && grep -q '<?xml' "$temp_file"; then
              echo "从 '$url' 下载成功，内容："
              head -n 10 "$temp_file"  # 显示文件前10行作为确认
              
              # 检查与本地文件的差异
              if ! cmp -s "$temp_file" epg.xml; then
                new_source_url="$url"
                new_file_downloaded=true
                
                # 移动新文件
                echo "EPG 文件内容已更改，使用从 '$url' 下载的新文件。"
                mv "$temp_file" epg.xml
                changed=true
                echo "EPG 文件已更新，来自源: $url"
                break  # 找到更新后可停止检查
              else
                echo "从 '$url' 下载的文件与本地 epg.xml 内容相同，跳过更新。"
              fi
            else
              echo "::error::从 '$url' 下载的文件无效或为空，请检查 URL 或文件内容。"
            fi
          else
            echo "::error::无法从 '$url' 下载 EPG 文件。"
          fi
        done

        echo "EPG 文件处理完成"

        # 将 changed 变量输出为环境变量，供后续步骤使用
        echo "changed=$changed" >> $GITHUB_ENV

    - name: Commit changes
      if: ${{ env.changed == 'true' }}
      run: |
        # 配置Git环境
        git config user.email "github-actions@noreply.com"
        git config user.name "GitHub Action Bot"
        
        # 准备提交消息
        current_date=$(date -R)
        commit_message="EPG更新: $current_date"
        
        # 添加并提交更改
        git add epg.xml
        git commit -m "$commit_message"
        
        # 推送更改
        git push origin HEAD --force-with-lease

    - name: Set up Git
      run: |
        git config user.email "github-actions@noreply.com"
        git config user.name "GitHub Action Bot"

    - name: Push changes
      if: ${{ env.changed == 'true' }}
      run: |
        git push origin HEAD --force-with-lease

